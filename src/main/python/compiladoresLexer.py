# Generated from c:/Users/Usuario/OneDrive/Documentos/Facultad/iua/tercero/DHS/compilador/src/main/python/compiladores.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,218,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
        1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,
        1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,1,23,1,24,4,24,141,8,24,11,24,12,24,142,1,25,1,25,
        1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,
        1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,
        1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,
        3,35,199,8,35,1,36,1,36,3,36,203,8,36,1,36,1,36,1,36,5,36,208,8,
        36,10,36,12,36,211,9,36,1,37,1,37,1,37,1,37,1,38,1,38,0,0,39,1,0,
        3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,
        29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,
        51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,
        73,35,75,36,77,37,1,0,3,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,
        32,32,221,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,1,0,0,0,5,83,
        1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,91,1,0,0,0,15,
        93,1,0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,21,99,1,0,0,0,23,102,1,0,
        0,0,25,104,1,0,0,0,27,106,1,0,0,0,29,108,1,0,0,0,31,110,1,0,0,0,
        33,112,1,0,0,0,35,114,1,0,0,0,37,116,1,0,0,0,39,119,1,0,0,0,41,122,
        1,0,0,0,43,125,1,0,0,0,45,128,1,0,0,0,47,133,1,0,0,0,49,140,1,0,
        0,0,51,144,1,0,0,0,53,148,1,0,0,0,55,153,1,0,0,0,57,159,1,0,0,0,
        59,166,1,0,0,0,61,171,1,0,0,0,63,177,1,0,0,0,65,181,1,0,0,0,67,184,
        1,0,0,0,69,189,1,0,0,0,71,198,1,0,0,0,73,202,1,0,0,0,75,212,1,0,
        0,0,77,216,1,0,0,0,79,80,7,0,0,0,80,2,1,0,0,0,81,82,7,1,0,0,82,4,
        1,0,0,0,83,84,5,40,0,0,84,6,1,0,0,0,85,86,5,41,0,0,86,8,1,0,0,0,
        87,88,5,59,0,0,88,10,1,0,0,0,89,90,5,123,0,0,90,12,1,0,0,0,91,92,
        5,125,0,0,92,14,1,0,0,0,93,94,5,44,0,0,94,16,1,0,0,0,95,96,5,46,
        0,0,96,18,1,0,0,0,97,98,5,61,0,0,98,20,1,0,0,0,99,100,5,61,0,0,100,
        101,5,61,0,0,101,22,1,0,0,0,102,103,5,43,0,0,103,24,1,0,0,0,104,
        105,5,45,0,0,105,26,1,0,0,0,106,107,5,42,0,0,107,28,1,0,0,0,108,
        109,5,47,0,0,109,30,1,0,0,0,110,111,5,37,0,0,111,32,1,0,0,0,112,
        113,5,62,0,0,113,34,1,0,0,0,114,115,5,60,0,0,115,36,1,0,0,0,116,
        117,5,62,0,0,117,118,5,61,0,0,118,38,1,0,0,0,119,120,5,60,0,0,120,
        121,5,61,0,0,121,40,1,0,0,0,122,123,5,124,0,0,123,124,5,124,0,0,
        124,42,1,0,0,0,125,126,5,38,0,0,126,127,5,38,0,0,127,44,1,0,0,0,
        128,129,5,84,0,0,129,130,5,82,0,0,130,131,5,85,0,0,131,132,5,69,
        0,0,132,46,1,0,0,0,133,134,5,70,0,0,134,135,5,65,0,0,135,136,5,76,
        0,0,136,137,5,83,0,0,137,138,5,69,0,0,138,48,1,0,0,0,139,141,3,3,
        1,0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,
        0,0,143,50,1,0,0,0,144,145,5,105,0,0,145,146,5,110,0,0,146,147,5,
        116,0,0,147,52,1,0,0,0,148,149,5,98,0,0,149,150,5,111,0,0,150,151,
        5,111,0,0,151,152,5,108,0,0,152,54,1,0,0,0,153,154,5,102,0,0,154,
        155,5,108,0,0,155,156,5,111,0,0,156,157,5,97,0,0,157,158,5,116,0,
        0,158,56,1,0,0,0,159,160,5,100,0,0,160,161,5,111,0,0,161,162,5,117,
        0,0,162,163,5,98,0,0,163,164,5,108,0,0,164,165,5,101,0,0,165,58,
        1,0,0,0,166,167,5,118,0,0,167,168,5,111,0,0,168,169,5,105,0,0,169,
        170,5,100,0,0,170,60,1,0,0,0,171,172,5,119,0,0,172,173,5,104,0,0,
        173,174,5,105,0,0,174,175,5,108,0,0,175,176,5,101,0,0,176,62,1,0,
        0,0,177,178,5,102,0,0,178,179,5,111,0,0,179,180,5,114,0,0,180,64,
        1,0,0,0,181,182,5,105,0,0,182,183,5,102,0,0,183,66,1,0,0,0,184,185,
        5,101,0,0,185,186,5,108,0,0,186,187,5,115,0,0,187,188,5,101,0,0,
        188,68,1,0,0,0,189,190,5,114,0,0,190,191,5,101,0,0,191,192,5,116,
        0,0,192,193,5,117,0,0,193,194,5,114,0,0,194,195,5,110,0,0,195,70,
        1,0,0,0,196,199,3,45,22,0,197,199,3,47,23,0,198,196,1,0,0,0,198,
        197,1,0,0,0,199,72,1,0,0,0,200,203,3,1,0,0,201,203,5,95,0,0,202,
        200,1,0,0,0,202,201,1,0,0,0,203,209,1,0,0,0,204,208,3,1,0,0,205,
        208,3,3,1,0,206,208,5,95,0,0,207,204,1,0,0,0,207,205,1,0,0,0,207,
        206,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,
        74,1,0,0,0,211,209,1,0,0,0,212,213,7,2,0,0,213,214,1,0,0,0,214,215,
        6,37,0,0,215,76,1,0,0,0,216,217,9,0,0,0,217,78,1,0,0,0,6,0,142,198,
        202,207,209,1,6,0,0
    ]

class compiladoresLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PA = 1
    PC = 2
    PYC = 3
    LLA = 4
    LLC = 5
    COMA = 6
    PUNTO = 7
    ASIG = 8
    IGUAL = 9
    SUMA = 10
    RESTA = 11
    MULT = 12
    DIV = 13
    MOD = 14
    MAY = 15
    MEN = 16
    MAYI = 17
    MENI = 18
    OR = 19
    AND = 20
    TRUE = 21
    FALSE = 22
    NUMERO = 23
    INT = 24
    BOOL = 25
    FLOAT = 26
    DOUBLE = 27
    VOID = 28
    WHILE = 29
    FOR = 30
    IF = 31
    ELSE = 32
    RETURN = 33
    BOOLEANS = 34
    ID = 35
    WS = 36
    OTRO = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "';'", "'{'", "'}'", "','", "'.'", "'='", "'=='", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", "'<'", "'>='", "'<='", 
            "'||'", "'&&'", "'TRUE'", "'FALSE'", "'int'", "'bool'", "'float'", 
            "'double'", "'void'", "'while'", "'for'", "'if'", "'else'", 
            "'return'" ]

    symbolicNames = [ "<INVALID>",
            "PA", "PC", "PYC", "LLA", "LLC", "COMA", "PUNTO", "ASIG", "IGUAL", 
            "SUMA", "RESTA", "MULT", "DIV", "MOD", "MAY", "MEN", "MAYI", 
            "MENI", "OR", "AND", "TRUE", "FALSE", "NUMERO", "INT", "BOOL", 
            "FLOAT", "DOUBLE", "VOID", "WHILE", "FOR", "IF", "ELSE", "RETURN", 
            "BOOLEANS", "ID", "WS", "OTRO" ]

    ruleNames = [ "LETRA", "DIGITO", "PA", "PC", "PYC", "LLA", "LLC", "COMA", 
                  "PUNTO", "ASIG", "IGUAL", "SUMA", "RESTA", "MULT", "DIV", 
                  "MOD", "MAY", "MEN", "MAYI", "MENI", "OR", "AND", "TRUE", 
                  "FALSE", "NUMERO", "INT", "BOOL", "FLOAT", "DOUBLE", "VOID", 
                  "WHILE", "FOR", "IF", "ELSE", "RETURN", "BOOLEANS", "ID", 
                  "WS", "OTRO" ]

    grammarFileName = "compiladores.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


